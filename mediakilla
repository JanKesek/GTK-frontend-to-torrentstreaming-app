#!/usr/bin/python3
#-*- coding: utf-8 -*-

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>


"BitTorrent videoplayer MediaKilla."


__author__ = "Janjk"
__credits__ = ["haael <jid:haael@jabber.at>", "Janjk <jid:jklambda@jabber.hot-chilli.net>"]

__copyright__ = "haael.co.uk/prim LTD"
__license__ = "GPLv3+"

__version__ = "0.0"
__status__ = "alpha"


import sys, os, signal
from pathlib import Path
from itertools import product
from interface import Interface

import gi

gi.require_version('Gtk', '3.0')
gi.require_version('Gst', '1.0')
gi.require_version('WebKit2', '4.0')

from gi.repository import Gtk, Gdk, GLib, Gst, WebKit2


def find_installation_path():	
	candidate_prefixes_linux = ['/usr/share', '/opt', '/usr/local/share/']
	drives_windows = ['C:', 'D:', 'E:', 'Z:']
	candidate_prefixes_windows = ['Program Files', 'Program Files (x86)']
	home_prefixes_linux = ['.config', '']
	home_prefixes_windows = ['Application Data', 'AppData', '', 'Desktop']
	file_prefixes_linux = ['', '.']
	application_names = ['mediakilla', 'MediaKilla']
	file_suffixes = ['-' + __version__, '']
	required_files = ['style-3.22.css', 'style-3.18.css', 'videoplayer.glade']
	
	if os.name == 'posix':
		home_dir = Path.home()
		for file_suffix, home_prefix, file_prefix, application_name in product(file_suffixes, home_prefixes_linux, file_prefixes_linux, application_names):
			candidate_path = home_dir / home_prefix / (file_prefix + application_name + file_suffix)
			print("Candidate installation path:", candidate_path)
			if all((candidate_path / filename).is_file() for filename in required_files):
				return candidate_path
		for file_suffix, candidate_prefix, application_name in product(file_suffixes, candidate_prefixes_linux, application_names):
			candidate_path = Path(candidate_prefix) / (application_name + file_suffix)
			print("Candidate installation path:", candidate_path)
			if all((candidate_path / filename).is_file() for filename in required_files):
				return candidate_path
	elif os.name == 'nt':
		home_dir = Path.home()
		for file_suffix, home_prefix, application_name in product(file_suffixes, home_prefixes_windows, application_names):
			candidate_path = home_dir / home_prefix / (application_name + file_suffix)
			print("Candidate installation path:", candidate_path)
			if all((candidate_path / filename).is_file() for filename in required_files):
				return candidate_path
		for file_suffix, drive, candidate_prefix, application_name in product(file_suffixes, drives_windows, candidate_prefixes_windows, application_names):
			candidate_path = Path(drive) / candidate_prefix / (application_name + file_suffix)
			print("Candidate installation path:", candidate_path)
			if all((candidate_path / filename).is_file() for filename in required_files):
				return candidate_path
	
	print("Exhausted candidate installation path.")
	return Path('')


if __name__ == '__main__':
	GLib.threads_init()
	Gst.init(None)
	
	path = find_installation_path()
	print("Using installation path:", path)
	
	css = Gtk.CssProvider()
	if Gtk.get_major_version() >= 3 and Gtk.get_minor_version() >= 22:
		css.load_from_path(str(path / 'style-3.22.css'))
	else:
		css.load_from_path(str(path / 'style-3.18.css'))
	Gtk.StyleContext.add_provider_for_screen(Gdk.Screen.get_default(), css, Gtk.STYLE_PROVIDER_PRIORITY_USER)
	
	mainloop = GLib.MainLoop()
	
	interface = Interface(mainloop, str(path / 'videoplayer.glade'))
	
	interface.webview = WebKit2.WebView()
	interface.webview.set_margin_top(54)
	interface.webview.set_margin_bottom(54)
	interface.notebook1.append_page(interface.webview)
	interface.webview.show()
	interface.webview.load_uri('https://kukai.app/')
	
	interface.main_window.show_all()
	interface.show_webview_tab()
	
	signal.signal(signal.SIGTERM, lambda signum, frame: mainloop.quit())
	sys.excepthook = lambda *args: (sys.__excepthook__(*args), mainloop.quit())
	
	try:
		mainloop.run()
	except KeyboardInterrupt:
		print()

