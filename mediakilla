#!/usr/bin/python3
#-*- coding: utf-8 -*-

#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>


"BitTorrent videoplayer MediaKilla."


__author__ = "haael"
__credits__ = ["haael <jid:haael@jabber.at>", "Janjk <jid:jklambda@jabber.hot-chilli.net>"]

__copyright__ = "haael.co.uk/prim LTD"
__license__ = 'GPLv3+'

__version__ = '0.0'
__status__ = 'alpha'


import sys, os, signal, logging
from pathlib import Path
from itertools import product

log = logging.getLogger('mediakilla')
log.setLevel(logging.DEBUG)

import gi

gi.require_version('Gtk', '3.0')
gi.require_version('Gst', '1.0')
gi.require_version('WebKit2', '4.0')

from gi.repository import Gtk, Gdk, GLib, WebKit2, Gst


def find_installation_path():
	log.info("Looking for installation path.")
	
	candidate_prefixes_linux = ['/usr/share', '/opt', '/usr/local/share/']
	drives_windows = ['C:', 'D:', 'E:', 'Z:']
	candidate_prefixes_windows = ['Program Files', 'Program Files (x86)']
	home_prefixes_linux = ['.config', '']
	home_prefixes_windows = ['Application Data', 'AppData', '', 'Desktop']
	file_prefixes_linux = ['', '.']
	application_names = ['mediakilla', 'MediaKilla']
	
	version_parts = __version__.split('.')
	file_suffixes = []
	for n in range(len(version_parts), 0, -1):
		file_suffixes.append('-' + '.'.join(version_parts[:n]))
	file_suffixes.append('')
	required_files = ['style-3.22.css', 'style-3.18.css', 'videoplayer.glade']
	
	if os.name == 'posix':
		home_dir = Path.home()
		for file_suffix, home_prefix, file_prefix, application_name in product(file_suffixes, home_prefixes_linux, file_prefixes_linux, application_names):
			candidate_path = home_dir / home_prefix / (file_prefix + application_name + file_suffix)
			log.debug("Candidate installation path: %s", candidate_path)
			if all((candidate_path / filename).is_file() for filename in required_files):
				return candidate_path
		for file_suffix, candidate_prefix, application_name in product(file_suffixes, candidate_prefixes_linux, application_names):
			candidate_path = Path(candidate_prefix) / (application_name + file_suffix)
			log.debug("Candidate installation path: %s", candidate_path)
			if all((candidate_path / filename).is_file() for filename in required_files):
				return candidate_path
	elif os.name == 'nt':
		home_dir = Path.home()
		for file_suffix, home_prefix, application_name in product(file_suffixes, home_prefixes_windows, application_names):
			candidate_path = home_dir / home_prefix / (application_name + file_suffix)
			log.debug("Candidate installation path: %s", candidate_path)
			if all((candidate_path / filename).is_file() for filename in required_files):
				return candidate_path
		for file_suffix, drive, candidate_prefix, application_name in product(file_suffixes, drives_windows, candidate_prefixes_windows, application_names):
			candidate_path = Path(drive) / candidate_prefix / (application_name + file_suffix)
			log.debug("Candidate installation path: %s", candidate_path)
			if all((candidate_path / filename).is_file() for filename in required_files):
				return candidate_path
	
	log.debug("Exhausted candidate installation path.")
	return Path('')


def create_webview(default_url):
	log.info("Creatinv webview.")
	webview = WebKit2.WebView()
	webview.set_margin_top(54)
	webview.set_margin_bottom(54)
	webview.load_uri(default_url)
	webview.show()
	return webview


if __name__ == '__main__':
	from utils import idle_add
	import traceback, time
	
	logging.basicConfig(filename='mediakilla.log', filemode='w')
	
	log.info("Start: %s", time.strftime('%Y-%m-%d %H:%M:%S'))
	
	GLib.threads_init()
	Gst.init(sys.argv)
	
	from interface import Interface, __version__ as interface_version
	if interface_version != __version__:
		raise ImportError(f"Wrong version of module `interface`. Expected '{__version__}', got '{interface_version}'.")
	
	from player import Player, __version__ as player_version
	if player_version != __version__:
		raise ImportError(f"Wrong version of module `player`. Expected '{__version__}', got '{player_version}'.")
	
	path = find_installation_path()
	log.info("Using installation path: %s", path)
	
	css = Gtk.CssProvider()
	if Gtk.get_major_version() >= 3 and Gtk.get_minor_version() >= 22:
		css.load_from_path(str(path / 'style-3.22.css'))
	else:
		css.load_from_path(str(path / 'style-3.18.css'))
	Gtk.StyleContext.add_provider_for_screen(Gdk.Screen.get_default(), css, Gtk.STYLE_PROVIDER_PRIORITY_USER)
	
	interface = Interface(str(path / 'videoplayer.glade'))
	webview = create_webview('https://kukai.app/')
	player = Player()
	
	interface.notebook1.append_page(webview)
	interface.show_webview_tab()
	interface.main_window.show_all()
	
	interface.connect('open-url', lambda iface, url: player.open_url(url))
	interface.connect('play', lambda iface: player.play())
	interface.connect('pause', lambda iface: player.pause())
	interface.connect('rewind', lambda iface, seconds: player.rewind(seconds))
	interface.connect('forward', lambda iface, seconds: player.forward(seconds))
	interface.connect('stop', lambda iface: player.stop())
	interface.connect('seek', lambda iface, position: player.seek(position))
	interface.connect('change-volume', lambda iface, volume: player.change_volume(volume))
	interface.connect('quit', lambda iface: Gtk.main_quit())
	
	player.connect('state-changed', lambda plyr, state: interface.player_state_changed(state))
	player.connect('current-position', lambda plyer, position, duration: interface.current_position(position, duration))
	player.connect('xid-needed', lambda plyer: interface.get_window_xid())
	
	exception_data = None
	
	@idle_add
	def enable_exceptions():
		signal.signal(signal.SIGTERM, lambda signum, frame: Gtk.main_quit())
		def intercept_exception(*args):
			sys.excepthook = sys.__excepthook__
			global exception_data
			exception_data = args
			log.critical("Exception: %s", args[1])
			Gtk.main_quit()
		sys.excepthook = intercept_exception
	
	enable_exceptions()
	
	#def test_exception():
	#	raise RuntimeError("test exception")
	#GLib.timeout_add(1000, test_exception)
	
	try:
		Gtk.main()
	except KeyboardInterrupt:
		print()
	
	Gst.deinit()
	
	log.info("Stop: %s", time.strftime('%Y-%m-%d %H:%M:%S'))
	
	if exception_data:
		for line in traceback.format_exception(*exception_data):
			log.error(line)
		sys.__excepthook__(*exception_data)

